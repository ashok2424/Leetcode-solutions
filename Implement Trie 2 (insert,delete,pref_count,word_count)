struct Node{
    int pref_words=0,whole_words=0;
    Node* next[26];
};
class Trie{
    Node* root;
    public:
    Trie(){  
        root = new Node();  
    }
    
    void insert(string &word){
        Node* cur = root;
        for(auto &ch:word){
            if(cur->next[ch-'a']==NULL){
                cur->next[ch-'a'] = new Node();
            }
            cur->pref_words++; //keep increasing pref count too
            cur = cur->next[ch-'a'];
        }
        //inc both whole & pref (as whole word is also a pref )
        cur->pref_words++;  cur->whole_words++;
    }

    int countWordsEqualTo(string &word){
        Node* cur = root;
        for(auto &ch:word){
            if(cur->next[ch-'a']==NULL) return 0;
            cur = cur->next[ch-'a'];
        }
        return cur->whole_words; //return end total word count
    }

    int countWordsStartingWith(string &word){
        Node* cur = root;
        for(auto &ch:word){
            if(cur->next[ch-'a']==NULL) return 0;
            cur = cur->next[ch-'a'];
        }
        return cur->pref_words; //return the prefix count
    }

    void erase(string &word){
        Node* cur = root;
        for(auto &ch:word){
            if(cur->next[ch-'a']==NULL) return ;
            cur->pref_words--; //keep decreasing pref count too
            cur = cur->next[ch-'a'];
        }
        //now decrease whole word as well as pref too
        cur->pref_words--; cur->whole_words--;
    }
};
